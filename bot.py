import os
import glob
import json
import logging
import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.utils.text_decorations import MarkdownDecoration
from dotenv import load_dotenv
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import aiohttp
from bs4 import BeautifulSoup
from config import ParsingConfig

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_vars = ["TELEGRAM_BOT_TOKEN", "ADMIN_CHAT_ID"]
missing_vars = [var for var in required_vars if not os.getenv(var)]

if missing_vars:
    error_msg = f"–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}"
    print(error_msg)
    if os.getenv("RAILWAY_ENVIRONMENT"):
        # –í Railway –ª–æ–≥–∏—Ä—É–µ–º –≤ stderr, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤ –ª–æ–≥–∞—Ö
        import sys
        print(error_msg, file=sys.stderr)
    exit(1)

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

SUBSCRIBERS_FILE = "data/subscribers.json"
SPAM_FILE = "data/antispam.json"
CACHE_FILE = "data/cache.json"
CACHE_TTL_DAYS = 10

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="MarkdownV2"))
dp = Dispatcher(storage=MemoryStorage())

md = MarkdownDecoration()

# --- FSM States ---
class BuildStates(StatesGroup):
    choose_game = State()
    choose_element = State()
    choose_character = State()

# --- –ö–Ω–æ–ø–∫–∏ ---
GAMES = ["Honkai: Star Rail"]
ELEMENTS = ["–û–≥–æ–Ω—å", "–õ—ë–¥", "–í–µ—Ç–µ—Ä", "–ö–≤–∞–Ω—Ç", "–§–∏–∑–∏–∫–∞", "–ú–Ω–∏–º–æ—Å—Ç—å", "–≠–ª–µ–∫—Ç—Ä–æ"]
# –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏, –ø–æ—Ç–æ–º –±—É–¥–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
EXAMPLE_CHARACTERS = {
    "Fire": ["March 7th", "Bronya", "Herta"],
    "Ice": ["Silver Wolf", "Seele", "Yanqing"],
    "Wind": ["Clara", "Himeko", "Bailu"],
    "Quantum": ["Gepard", "Kepler", "Vermillion"],
    "Physical": ["Ningguang", "Herta", "Gepard"],
    "Imaginary": ["Gepard", "Bronya", "Herta"],
    "Lightning": ["Bronya", "Herta", "Gepard"]
}

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º
def load_cache():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(CACHE_FILE):
            with open(CACHE_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        return {
            "elements": {},
            "characters": {},
            "links": {},
            "updated": datetime.utcnow().isoformat()
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—ç—à–∞: {str(e)}")
        return {
            "elements": {},
            "characters": {},
            "links": {},
            "updated": datetime.utcnow().isoformat()
        }

def save_cache(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –≤ —Ñ–∞–π–ª"""
    try:
        os.makedirs(os.path.dirname(CACHE_FILE), exist_ok=True)
        with open(CACHE_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—ç—à–∞: {str(e)}")

# --- –≠–º–æ–¥–∑–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ---
ELEMENT_EMOJI = {
    "–û–≥–æ–Ω—å": "üî•",
    "–õ—ë–¥": "‚ùÑÔ∏è",
    "–í–µ—Ç–µ—Ä": "üå™Ô∏è",
    "–ö–≤–∞–Ω—Ç": "‚öõÔ∏è",
    "–§–∏–∑–∏–∫–∞": "üí™",
    "–ú–Ω–∏–º–æ—Å—Ç—å": "üåà",
    "–≠–ª–µ–∫—Ç—Ä–æ": "‚ö°"
}

# --- URLs ---
CHARACTER_LIST_URL = "https://www.prydwen.gg/star-rail/characters"
CHARACTER_BASE_URL = "https://www.prydwen.gg/star-rail/characters/"

def load_json(path, default):
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return default

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False)

def get_latest_build_file():
    files = glob.glob("data/builds_*.json")
    if not files:
        return None
    return max(files, key=os.path.getctime)

def format_build(build_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∏–ª–¥ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    if not build_data or not build_data.get("builds"):
        return "–î–∞–Ω–Ω—ã–µ –æ –±–∏–ª–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    text = []
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
    char = build_data["character"]
    text.append(f"*{char['name']}*\n")
    
    # –≠–ª–µ–º–µ–Ω—Ç –∏ –ø—É—Ç—å —Å —ç–º–æ–¥–∑–∏
    element = ParsingConfig.ELEMENTS.get(char.get("element", "Unknown"))
    element_text = element["emoji"] + " " + element["name"] if element else "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç"
    text.append(f"–≠–ª–µ–º–µ–Ω—Ç: {element_text}\n")
    
    if char.get("path"):
        text.append(f"–ü—É—Ç—å: {char['path']}\n")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –±–∏–ª–¥
    for build in build_data["builds"]:
        text.append("\n")
        text.append(f"*{build['name']}*\n")
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        if build.get("description"):
            text.append(f"{build['description']}\n")
        
        # –†–µ–π—Ç–∏–Ω–≥
        if build.get("rating"):
            stars = "‚≠ê" * build["rating"]["stars"]
            text.append(f"–†–µ–π—Ç–∏–Ω–≥: {stars} ({build['rating']['text']})\n")
        
        # –û—Ä—É–∂–∏–µ
        if build.get("weapon"):
            weapon = build["weapon"]
            text.append(f"\n*–û—Ä—É–∂–∏–µ:*\n")
            text.append(f"{weapon['name']}\n")
            if weapon.get("rank"):
                text.append(f"–£—Ä–æ–≤–µ–Ω—å: {weapon['rank']}\n")
        
        # –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        if build.get("artifacts"):
            text.append("\n*–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:*\n")
            for artifact in build["artifacts"]:
                text.append(f"\n*{artifact['name']}*\n")
                if artifact.get("set"):
                    text.append(f"–°–µ—Ç: {artifact['set']}\n")
                if artifact.get("slot"):
                    text.append(f"–°–ª–æ—Ç: {artifact['slot']}\n")
                
                # –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç
                if artifact.get("main_stat"):
                    main_stat = artifact["main_stat"]
                    text.append(f"–û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç: {main_stat['name']}")
                    if main_stat.get("type"):
                        text.append(f" [{main_stat['type']}]")
                    text.append("\n")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—ã
                if artifact.get("sub_stats"):
                    text.append("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—ã:\n")
                    for sub in artifact["sub_stats"]:
                        stat_text = sub["name"]
                        if sub.get("type"):
                            stat_text += f" [{sub['type']}]"
                        text.append(f"- {stat_text}\n")
        
        # –ö–æ–º–∞–Ω–¥–∞
        if build.get("team"):
            text.append("\n*–ö–æ–º–∞–Ω–¥–∞:*\n")
            for member in build["team"]:
                text.append(f"- {member['name']}\n")
    
    return ''.join(text)

def make_keyboard(options, add_back=False):
    keyboard = [[KeyboardButton(text=o)] for o in options]
    if add_back:
        keyboard.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –∫—ç—à–∞ ---
def get_elements_from_cache():
    cache = load_cache()
    return list(cache.get("elements", {}).keys())

def get_characters_from_cache(element):
    cache = load_cache()
    return cache.get("elements", {}).get(element, [])

# --- FSM-–¥–∏–∞–ª–æ–≥ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥' ---
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(md.quote("–ü—Ä–∏–≤–µ—Ç! –î–ª—è –∫–∞–∫–æ–π –∏–≥—Ä—ã —Ç–µ–±–µ –Ω—É–∂–Ω–∞ —Å–±–æ—Ä–∫–∞?"), reply_markup=make_keyboard(GAMES))
    await state.set_state(BuildStates.choose_game)

@dp.message(BuildStates.choose_game)
async def choose_game(message: Message, state: FSMContext):
    if message.text not in GAMES:
        await message.answer(md.quote("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏."), reply_markup=make_keyboard(GAMES))
        return
    await state.update_data(game=message.text)
    elements = get_elements_from_cache()
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º
    elements_with_emoji = [f"{ELEMENT_EMOJI.get(e, '')} {e}".strip() for e in elements]
    await message.answer(md.quote("–í—ã–±–µ—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:"), reply_markup=make_keyboard(elements_with_emoji, add_back=True))
    await state.set_state(BuildStates.choose_element)

@dp.message(BuildStates.choose_element)
async def choose_element(message: Message, state: FSMContext):
    elements = get_elements_from_cache()
    elements_with_emoji = [f"{ELEMENT_EMOJI.get(e, '')} {e}".strip() for e in elements]
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await message.answer(md.quote("–î–ª—è –∫–∞–∫–æ–π –∏–≥—Ä—ã —Ç–µ–±–µ –Ω—É–∂–Ω–∞ —Å–±–æ—Ä–∫–∞?"), reply_markup=make_keyboard(GAMES))
        await state.set_state(BuildStates.choose_game)
        return
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    element_map = {f"{ELEMENT_EMOJI.get(e, '')} {e}".strip(): e for e in elements}
    if message.text not in element_map:
        await message.answer(md.quote("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏."), reply_markup=make_keyboard(elements_with_emoji, add_back=True))
        return
    element = element_map[message.text]
    await state.update_data(element=element)
    chars = get_characters_from_cache(element)
    await message.answer(md.quote("–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:"), reply_markup=make_keyboard(chars, add_back=True))
    await state.set_state(BuildStates.choose_character)

def mdv2_list(items):
    return "\n".join(f"\\- {md.quote(i)}" for i in items)

@dp.message(BuildStates.choose_character)
async def choose_character(message: Message, state: FSMContext):
    data = await state.get_data()
    chars = get_characters_from_cache(data.get("element"))
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        elements = get_elements_from_cache()
        elements_with_emoji = [f"{ELEMENT_EMOJI.get(e, '')} {e}".strip() for e in elements]
        await message.answer(md.quote("–í—ã–±–µ—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:"), reply_markup=make_keyboard(elements_with_emoji, add_back=True))
        await state.set_state(BuildStates.choose_element)
        return
    if message.text not in chars:
        await message.answer(md.quote("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏."), reply_markup=make_keyboard(chars, add_back=True))
        return
    await state.update_data(character=message.text)
    await message.answer(md.quote(f"–ò—â—É —Å–≤–µ–∂–∏–π –±–∏–ª–¥ –¥–ª—è {message.text}..."), reply_markup=types.ReplyKeyboardRemove())
    build = await get_build(message.text)
    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–¥–∞—á–∏
    text = format_build_v2(message.text, build)
    if not text.strip():
        text = md.quote("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–∏–ª–¥—É —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
    await message.answer(text)
    await state.clear()

@dp.message(Command("latest"))
async def cmd_latest(message: Message):
    # –ê–Ω—Ç–∏—Å–ø–∞–º: –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 30 —Å–µ–∫—É–Ω–¥
    antispam = load_json(SPAM_FILE, {})
    user_id = str(message.from_user.id)
    now = datetime.utcnow()
    last = antispam.get(user_id)
    if last and (now - datetime.fromisoformat(last)) < timedelta(seconds=30):
        await message.answer(md.quote("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
        return
    antispam[user_id] = now.isoformat()
    save_json(SPAM_FILE, antispam)

    file = get_latest_build_file()
    if not file:
        await message.answer(md.quote("–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –±–∏–ª–¥–æ–≤."))
        return
    with open(file, "r", encoding="utf-8") as f:
        builds = json.load(f)
    for build in builds[:10]:
        await message.answer(md.quote(format_build(build)))

async def cmd_build(message: Message):
    character_name = message.text.replace("/build", "").strip()
    if not character_name:
        await message.answer(md.quote("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /build"))
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∏–ª–¥ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π
        build = await get_build(character_name)
        if build:
            formatted = format_build(character_name, build)
            await message.answer(formatted)
        else:
            await message.answer(md.quote("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /build: {e}")
        await message.answer(md.quote("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–¥–µ"))

async def update_cache_on_demand():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    cache = load_cache()
    current_time = datetime.utcnow()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫—ç—à
    cache_age = current_time - datetime.fromisoformat(cache.get("updated", "1970-01-01"))
    if cache_age > timedelta(days=CACHE_TTL_DAYS):
        try:
            await update_full_cache()
            logging.info("–ö—ç—à –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {e}")

@dp.message(Command("build"))
async def cmd_build(message: Message):
    character_name = message.text.replace("/build", "").strip()
    if not character_name:
        await message.answer(md.quote("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /build"))
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∏–ª–¥ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π
        build = await get_build(character_name)
        if build:
            formatted = format_build(character_name, build)
            await message.answer(formatted)
        else:
            await message.answer(md.quote("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /build: {e}")
        await message.answer(md.quote("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–¥–µ"))

@dp.message(Command("update_cache"))
async def cmd_update_cache(message: Message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    try:
        await update_full_cache()
        await message.answer(md.quote("–ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!"))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞: {e}")
        await message.answer(md.quote(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞: {str(e)}"))

@dp.message(Command("subscribe"))
async def cmd_subscribe(message: Message):
    subs = set(load_json(SUBSCRIBERS_FILE, []))
    subs.add(message.from_user.id)
    save_json(SUBSCRIBERS_FILE, list(subs))
    await message.answer(md.quote("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É!"))

@dp.message(Command("unsubscribe"))
async def cmd_unsubscribe(message: Message):
    subs = set(load_json(SUBSCRIBERS_FILE, []))
    subs.discard(message.from_user.id)
    save_json(SUBSCRIBERS_FILE, list(subs))
    await message.answer(md.quote("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏."))

@dp.error()
async def error_handler(event, error):
    logging.error(f"–û—à–∏–±–∫–∞: {error}")
    if isinstance(event, Message):
        await event.answer(md.quote("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(ADMIN_CHAT_ID, md.quote(f"Error: {error}"))
        except Exception:
            pass

async def daily_broadcast():
    while True:
        subs = set(load_json(SUBSCRIBERS_FILE, []))
        file = get_latest_build_file()
        if file:
            with open(file, "r", encoding="utf-8") as f:
                builds = json.load(f)
            text = "\n\n".join([format_build(b) for b in builds[:3]])
            for uid in subs:
                try:
                    await bot.send_message(uid, text)
                except Exception as e:
                    logging.warning(f"Can't send to {uid}: {e}")
        await asyncio.sleep(24 * 3600)

async def parse_build_prydwen(soup: BeautifulSoup) -> list:
    """–ü–∞—Ä—Å–∏—Ç –±–∏–ª–¥—ã –∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ prydwen.gg"""
    builds = []
    
    try:
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        base_info = {
            "character": {
                "name": "",
                "element": "",
                "path": ""
            },
            "builds": []
        }
        
        # –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        name_elem = soup.find("h1", class_="character-name")
        if name_elem:
            base_info["character"]["name"] = name_elem.text.strip()
        
        # –≠–ª–µ–º–µ–Ω—Ç
        element_elem = soup.find("img", class_="element-icon")
        if element_elem:
            element_text = element_elem["alt"].strip()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
            for eng, data in ParsingConfig.ELEMENTS.items():
                if data["name"] == element_text:
                    base_info["character"]["element"] = eng
                    break
            else:
                base_info["character"]["element"] = "Unknown"
        
        # –ü—É—Ç—å
        path_elem = soup.find("img", class_="path-icon")
        if path_elem:
            base_info["character"]["path"] = path_elem["alt"].strip()
        
        # –ò—â–µ–º –≤—Å–µ –±–ª–æ–∫–∏ —Å –±–∏–ª–¥–∞–º–∏
        build_blocks = soup.find_all("div", class_="build-block")
        
        for block in build_blocks:
            build = {
                "name": "",
                "description": "",
                "weapon": {"name": "", "rank": ""},
                "artifacts": [],
                "team": [],
                "stats": {},
                "rating": {"stars": 0, "text": ""},
                "type": "main",
                "source": "prydwen.gg"
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∏–ª–¥–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π)
            title = block.find("h2")
            if title:
                title_text = title.text.strip().lower()
                build["name"] = title.text.strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                if any(keyword in title_text for keyword in ParsingConfig.BEST_KEYWORDS):
                    build["type"] = "main"
                elif any(keyword in title_text for keyword in ParsingConfig.ALTERNATIVE_KEYWORDS):
                    build["type"] = "alternative"
            
            # –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            description = block.find("p", class_="description")
            if description:
                build["description"] = description.text.strip()
            
            # –ò—â–µ–º –æ—Ä—É–∂–∏–µ
            weapon = block.find("div", class_="weapon")
            if weapon:
                build["weapon"]["name"] = weapon.text.strip()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ—Ä—É–∂–∏—è
                rank = weapon.find("span", class_="rank")
                if rank:
                    rank_text = rank.text.lower()
                    if any(keyword in rank_text for keyword in ParsingConfig.RANK_KEYWORDS):
                        build["weapon"]["rank"] = rank_text.strip()
            
            # –ò—â–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
            artifacts = block.find_all("div", class_="artifact")
            for art in artifacts:
                artifact = {
                    "name": "",
                    "set": "",
                    "slot": "",
                    "main_stat": {"name": "", "type": ""},
                    "sub_stats": []
                }
                
                # –ò–º—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
                name = art.find("h3")
                if name:
                    artifact["name"] = name.text.strip()
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ—Ç –ø–æ –∏–º–µ–Ω–∏
                    for slot, keywords in ParsingConfig.STATS_MAIN_SLOTS.items():
                        if any(keyword in artifact["name"].lower() for keyword in keywords):
                            artifact["slot"] = slot
                            break
                
                # –ò—â–µ–º —Å–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
                set_name = art.find("span", class_="set")
                if set_name:
                    artifact["set"] = set_name.text.strip()
                
                # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç
                main_stat = art.find("div", class_="main-stat")
                if main_stat:
                    artifact["main_stat"]["name"] = main_stat.text.strip()
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç–∞—Ç–∞
                    stat_text = main_stat.text.lower()
                    for stat_key, keywords in ParsingConfig.STAT_KEYWORDS.items():
                        if any(keyword in stat_text for keyword in keywords):
                            artifact["main_stat"]["type"] = stat_key
                            break
                
                # –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—ã
                sub_stats = art.find_all("div", class_="sub-stat")
                for stat in sub_stats:
                    stat_text = stat.text.strip()
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç–∞—Ç–∞
                    stat_type = next((stat_key for stat_key, keywords in ParsingConfig.STAT_KEYWORDS.items() 
                                    if any(keyword in stat_text.lower() for keyword in keywords)), "")
                    artifact["sub_stats"].append({
                        "name": stat_text,
                        "type": stat_type
                    })
                
                build["artifacts"].append(artifact)
            
            # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É
            team = block.find("div", class_="team")
            if team:
                for char in team.find_all("div", class_="character"):
                    build["team"].append({
                        "name": char.text.strip(),
                        "element": "",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
                        "role": ""  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
                    })
            
            # –ò—â–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            rating = block.find("div", class_="rating")
            if rating:
                build["rating"] = {
                    "stars": 0,
                    "text": "",
                    "numeric": 0
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–≤–µ–∑–¥—ã
                stars = rating.find_all("span", class_="star")
                build["rating"]["stars"] = len(stars)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
                text_rating = rating.find("span", class_="text")
                if text_rating:
                    text = text_rating.text.strip()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ
                    if text.isdigit():
                        build["rating"]["numeric"] = int(text)
                        build["rating"]["text"] = f"{text}/5"
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –±—É–∫–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                    elif text in ParsingConfig.RATING_FORMATS["text"]:
                        build["rating"]["text"] = text
                        build["rating"]["numeric"] = ParsingConfig.RATING_FORMATS["text"].index(text) + 1
            
            builds.append(build)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –±–∏–ª–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
        if not builds:
            # –ë–∏–ª–¥
            build_elem = soup.find("div", class_="build-guide")
            if build_elem:
                builds.append({
                    "name": "–û—Å–Ω–æ–≤–Ω–æ–π –±–∏–ª–¥",
                    "description": build_elem.text.strip(),
                    "type": "main",
                    "source": "prydwen.gg"
                })
            
            # –†–µ–ª–∏–∫—Ç—ã (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
            relic_containers = soup.find_all("div", class_="relic-set")
            if relic_containers:
                for container in relic_containers:
                    relic = {
                        "name": container.find("h3").text.strip(),
                        "main_stat": container.find("div", class_="main-stat").text.strip() if container.find("div", class_="main-stat") else "",
                        "sub_stats": [stat.text.strip() for stat in container.find_all("div", class_="sub-stat")]
                    }
                    builds[0]["artifacts"].append(relic)
            
            # –ö–æ–Ω—É—Å (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
            cone_elem = soup.find("div", class_="light-cone")
            if cone_elem:
                builds[0]["weapon"] = {
                    "name": cone_elem.find("h3").text.strip(),
                    "stats": [stat.text.strip() for stat in cone_elem.find_all("div", class_="stat")]
                }
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –±–∏–ª–¥–∞: {str(e)}")
        return None
    
    return builds if builds else None

async def get_build(character_name: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∏–ª–¥ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∑–∞–≥—Ä—É–∂–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –∫—ç—à–∞
    cache = load_cache()
    element = None
    for elem, chars in cache.get("elements", {}).items():
        if character_name.lower() in [char.lower() for char in chars]:
            element = elem
            break
    
    if not element:
        return None
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cache_file = f"cache/{character_name.lower()}.json"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
    if os.path.exists(cache_file):
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫—ç—à–∞
            build_data = load_json(cache_file, default=None)
            if build_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã
                if "character" in build_data and "builds" in build_data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫—ç—à (–±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤)
                    cache_age = datetime.now() - datetime.fromtimestamp(os.path.getmtime(cache_file))
                    if cache_age.total_seconds() < 24 * 3600:
                        return build_data
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫—ç—à–∞ –¥–ª—è {character_name}: {str(e)}")
            # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –∫—ç—à
            try:
                os.remove(cache_file)
            except:
                pass
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–∞–π—Ç–∞
    try:
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(f"{CHARACTER_BASE_URL}{character_name.lower()}") as resp:
                    if resp.status == 200:
                        html = await resp.text()
                        soup = BeautifulSoup(html, "html.parser")
                        
                        # –ü–∞—Ä—Å–∏–º –±–∏–ª–¥—ã
                        builds = await parse_build_prydwen(soup)
                        if builds and isinstance(builds, list):
                            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                            build_data = {
                                "character": {
                                    "name": character_name,
                                    "element": element
                                },
                                "builds": builds
                            }
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                            element_elem = soup.find("img", class_="element-icon")
                            if element_elem:
                                element_text = element_elem["alt"].strip()
                                for eng, data in ParsingConfig.ELEMENTS.items():
                                    if data["name"] == element_text:
                                        build_data["character"]["element"] = eng
                                        break
                                else:
                                    build_data["character"]["element"] = "Unknown"
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å
                            path_elem = soup.find("img", class_="path-icon")
                            if path_elem:
                                build_data["character"]["path"] = path_elem["alt"].strip()
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                            save_json(cache_file, build_data)
                            return build_data
                        else:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –±–∏–ª–¥–æ–≤ –¥–ª—è {character_name}")
                            return None
                    elif resp.status == 404:
                        logging.warning(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è {character_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        return None
                    else:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è {character_name}: {resp.status}")
                        return None
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∏–ª–¥–∞ –¥–ª—è {character_name}: {str(e)}")
                return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–ª–¥–∞ –¥–ª—è {character_name}: {str(e)}")
        return None

async def fetch_characters_and_elements() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–∞–π—Ç–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(CHARACTER_BASE_URL) as resp:
                if resp.status != 200:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {resp.status}")
                    return {"elements": {}, "characters": {}, "links": {}}
                
                html = await resp.text()
                soup = BeautifulSoup(html, "html.parser")
                
                # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
                characters_container = soup.find("div", class_="characters-list")
                if not characters_container:
                    logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏!")
                    return {"elements": {}, "characters": {}, "links": {}}
                
                elements = {}
                characters = {}
                links = {}
                
                # –ò—â–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                for char_card in characters_container.find_all("div", class_="character-card"):
                    # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                    char_a = char_card.find("a")
                    if not char_a:
                        continue
                    
                    char_name = char_a.text.strip()
                    char_link = CHARACTER_BASE_URL + char_a["href"].split('/')[-1]  # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
                    
                    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                    element_img = char_card.find("img", class_="element-icon")
                    if not element_img or not element_img.get("alt"):
                        logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {char_name}")
                        continue
                    
                    element_text = element_img["alt"].strip()
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    element = next((eng for eng, data in ParsingConfig.ELEMENTS.items() 
                                  if data.get("name") == element_text), None)
                    if not element:
                        logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {char_name}: {element_text}")
                        continue
                    
                    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    if element not in elements:
                        elements[element] = []
                    elements[element].append(char_name)
                    characters[char_name] = element
                    links[char_name] = char_link
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                logging.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {len(characters)}")
                for element, chars in elements.items():
                    logging.info(f"–≠–ª–µ–º–µ–Ω—Ç {element} ({ParsingConfig.ELEMENTS[element]['emoji']}): {len(chars)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
                
                return {"elements": elements, "characters": characters, "links": links}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {str(e)}")
        return {"elements": {}, "characters": {}, "links": {}}

def format_build_v2(character_name: str, build_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∏–ª–¥ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram"""
    if not build_data or not build_data.get("builds"):
        return ""

    character_info = build_data.get("character", {})
    builds = build_data.get("builds", [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
    element_emoji = ELEMENT_EMOJI.get(character_info.get("element", ""), "")
    path = character_info.get("path", "")
    
    result = []
    result.append(f"*{character_name}* {element_emoji}")
    if path:
        result.append(f"*–ü—É—Ç—å:* {path}")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –±–∏–ª–¥
    for build in builds:
        if build.get("type") == "main":
            result.append("\n*–û—Å–Ω–æ–≤–Ω–æ–π –±–∏–ª–¥:*")
        else:
            result.append("\n*–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –±–∏–ª–¥:*")
        
        if build.get("name"):
            result.append(f"\- *–ù–∞–∑–≤–∞–Ω–∏–µ:* {build['name']}")
        
        if build.get("description"):
            result.append(f"\- *–û–ø–∏—Å–∞–Ω–∏–µ:* {build['description']}")
        
        # –û—Ä—É–∂–∏–µ
        weapon = build.get("weapon", {})
        if weapon.get("name"):
            weapon_text = f"\- *–û—Ä—É–∂–∏–µ:* {weapon['name']}"
            if weapon.get("rank"):
                weapon_text += f" ({weapon['rank']})"
            result.append(weapon_text)
        
        # –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        if build.get("artifacts"):
            result.append("\- *–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:*")
            for artifact in build["artifacts"]:
                if artifact.get("name"):
                    artifact_text = f"\-\- {artifact['name']}"
                    if artifact.get("set"):
                        artifact_text += f" ({artifact['set']})"
                    if artifact.get("main_stat"):
                        artifact_text += f"\n\-\-\- *–û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç:* {artifact['main_stat']['name']}"
                    if artifact.get("sub_stats"):
                        artifact_text += "\n\-\-\- *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—ã:* " + ", ".join(artifact['sub_stats'])
                    result.append(artifact_text)
        
        # –ö–æ–º–∞–Ω–¥–∞
        if build.get("team"):
            result.append("\- *–ö–æ–º–∞–Ω–¥–∞:*")
            for teammate in build["team"]:
                if teammate.get("name"):
                    result.append(f"\-\- {teammate['name']}")
        
        # –†–µ–π—Ç–∏–Ω–≥
        rating = build.get("rating", {})
        if rating.get("stars") or rating.get("text"):
            rating_text = "\- *–†–µ–π—Ç–∏–Ω–≥:* "
            if rating.get("stars"):
                rating_text += f"{rating['stars']}‚≠ê"
            if rating.get("text"):
                rating_text += f" ({rating['text']})"
            result.append(rating_text)
    
    return "\n".join(result)

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
async def update_full_cache():
    cache = load_cache()
    char_data = await fetch_characters_and_elements()
    cache["elements"] = char_data["elements"]
    cache["characters"] = char_data["characters"]
    cache["links"] = char_data["links"]
    cache["updated"] = datetime.utcnow().isoformat()
    save_cache(cache)
    return cache

def is_cache_expired(cache_data: dict, ttl_days: int = 10) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫—ç—à–∞"""
    if not cache_data or "updated" not in cache_data:
        return True
    last_updated = datetime.fromisoformat(cache_data["updated"])
    return (datetime.now() - last_updated) > timedelta(days=ttl_days)

async def cache_auto_updater():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à —Ä–∞–∑ –≤ 10 –¥–Ω–µ–π"""
    while True:
        cache = load_cache()
        if is_cache_expired(cache) or not cache.get("elements"):
            await update_full_cache()
        # –ñ–¥–µ–º 1 –¥–µ–Ω—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(24 * 60 * 60)  # 1 –¥–µ–Ω—å

# --- –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ main ---
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    asyncio.create_task(daily_broadcast())
    asyncio.create_task(cache_auto_updater())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
