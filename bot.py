import os
import logging
import asyncio
import requests
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from datetime import datetime, timedelta
from config import BotConfig
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import threading
import re

DATA_DIR = "data"
CACHE_FILE = os.path.join(DATA_DIR, "cache.json")
CACHE_TTL_HOURS = 24

ART_DIR = "StarRailRes-master/image/character_preview"
art_map = {
    "–ê—Ö–µ—Ä–æ–Ω": "Acheron.png",
    "–ê—Ä–ª–∞–Ω": "Arlan.png",
    "–ê—Å—Ç–∞": "Asta.png",
    "–ë–∞–π–ª—É": "Bailu.png",
    "–ë—Ä–æ–Ω—è": "Bronya.png",
    "–ì–µ—Ä—Ç–∞": "Herta.png",
    "–ì–µ–ø–∞—Ä–¥": "Gepard.png",
    "–ì—É–π–Ω–∞–π—Ñ—ç–Ω—å": "Guinaifei.png",
    "–î–∞–Ω—å –•—ç–Ω": "Dan Heng.png",
    "–î–∞–Ω—å –•—ç–Ω: –ü–æ–∂–∏—Ä–∞—Ç–µ–ª—å –õ—É–Ω—ã": "Imbibitor Lunae.png",
    "–ó–µ–ª–µ": "Seele.png",
    "–ö–∞—Ñ–∫–∞": "Kafka.png",
    "–õ—É–∫–∞": "Luka.png",
    "–õ–æ—á–∞": "Luocha.png",
    "–ú–∞—Ä—Ç 7": "march 7.png",
    "–ú–∞—Ä—Ç 7 (–í–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ)": "Mart 7 Imaginary.png",
    "–ù–∞—Ç–∞—à–∞": "Natasha.png",
    "–ü–µ–ª–∞": "Pela.png",
    "–°–µ—Ä–≤–∞–ª": "Serval.png",
    "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –í–æ–ª–∫": "Silver Wolf.png",
    "–¢–æ–ø–∞–∑ –∏ –°—á–µ—Ç–æ–≤–æ–¥": "Topaz.png",
    "–¢–∏–Ω—ä—é–Ω—å": "Tingyung.png",
    "–¶–∑–∏–Ω –Æ–∞–Ω—å": "Jing Yuan.png",
    "–¶–∑–∏–Ω–ª—é": "Jingliu.png",
    "–¶–∏–Ω—Ü—é—ç": "Qinque.png",
    "–•–∞–Ω—å—è": "Hanua.png",
    "–•–∏–º–µ–∫–æ": "Himeko.png",
    "–•–æ—Ö–æ": "Huo-huo.png",
    "–•—É–æ—Ö—É–æ": "Huo-huo.png",
    "–•—É–∫": "Hook.png",
    "–†—ã—Å—å": "Lynx.png",
    "–°—é—ç–∏": "Xuei.png",
    "–¶–∑—è–æ—Ü—é": "Jiaoqu.png",
    "–§—ç–π—Å—è–æ": "Feixiao.png",
    "–Æ–Ω—å–ª–∏": "Yunli.png",
    "–õ–∏–Ω—à–∞": "Lingsha.png",
    "–ú–æ—Ü–∑—ç": "Moze.png",
    "–§—É–≥–∞": "Fugue.png"
}
def get_art_path(character_name, art_map=art_map, art_dir=ART_DIR):
    filename = art_map.get(character_name)
    if filename:
        return os.path.join(art_dir, filename)
    return None

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# --- FSM States ---
class BuildStates(StatesGroup):
    choose_game = State()
    choose_element = State()
    choose_character = State()
    show_build = State()

# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
def load_cache() -> dict:
    if not os.path.exists(CACHE_FILE):
        return {"last_updated": None, "game_data": {}}
    try:
        with open(CACHE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {"last_updated": None, "game_data": {}}

def save_cache(cache: dict):
    os.makedirs(DATA_DIR, exist_ok=True)
    with open(CACHE_FILE, "w", encoding="utf-8") as f:
        json.dump(cache, f, ensure_ascii=False, indent=2)

def is_cache_valid(cache: dict) -> bool:
    try:
        if not cache or not cache.get("last_updated"):
            return False
        last = datetime.fromisoformat(cache["last_updated"])
        return datetime.now() - last < timedelta(hours=CACHE_TTL_HOURS)
    except Exception:
        return False

def fetch_all_data():
    urls = BotConfig.GITHUB_DATA_URLS["Honkai: Star Rail"]
    data = {}
    for key, url in urls.items():
        resp = requests.get(url)
        resp.raise_for_status()
        data[key] = resp.json()
    return data

def update_cache():
    data = fetch_all_data()
    cache = {
        "last_updated": datetime.now().isoformat(),
        "game_data": {
            "Honkai: Star Rail": data
        }
    }
    save_cache(cache)
    return cache

# --- –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∏–º—ë–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π ---
def build_tag_map(game_data, builds):
    # tag: {"ru": ..., "en": ...}
    tag_map = {}
    # ru: tag -> name
    for char in game_data["characters"].values():
        tag_map[char["tag"]] = {"ru": char["name"]}
    # en: tag -> name
    for build in builds:
        tag = build.get("tag")
        if tag and tag in tag_map:
            tag_map[tag]["en"] = build["name"]
    return tag_map

def find_build_for_character(character, builds):
    # character: –æ–±—ä–µ–∫—Ç –∏–∑ StarRailRes
    # builds: —Å–ø–∏—Å–æ–∫ –±–∏–ª–¥–æ–≤ –∏–∑ fribbels
    tag = character.get("tag")
    for build in builds:
        if build.get("tag") == tag:
            return build
    return None

# --- –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∏ –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö ---
def get_elements(game_data):
    elements = set()
    for char in game_data["characters"].values():
        if "path" in char and char["path"]:
            elements.add(char["path"])
    return sorted(elements)

def get_path_name(game_data, path_id):
    for path in game_data["paths"].values():
        if path["id"] == path_id:
            return path["name"]
    return path_id

def get_element_name(game_data, element_id):
    for el in game_data["elements"].values():
        if el["id"] == element_id:
            return el["name"]
    return element_id

def get_characters_by_element(game_data, element):
    return [c["name"] for c in game_data["characters"].values() if c.get("path") == element]

def get_character_data(game_data, name):
    for c in game_data["characters"].values():
        if c.get("name") == name:
            return c
    return None

def get_relic_set_name(game_data, set_id):
    for s in game_data["relic_sets"].values():
        if s["id"] == set_id:
            return s["name"]
    return set_id

def get_planar_name(game_data, set_id):
    for s in game_data["relic_sets"].values():
        if s["id"] == set_id and s.get("type") == "Planar":
            return s["name"]
    return set_id

def get_cone_name(game_data, cone_id):
    for cone in game_data["light_cones"].values():
        if cone["id"] == cone_id:
            return cone["name"], cone.get("rarity", "")
    return cone_id, ""

def get_main_stat_name(game_data, stat_id):
    for stat in game_data["relic_main_affixes"].values():
        if stat["id"] == stat_id:
            # –í ru —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å affixes, –Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω—É–∂–µ–Ω property
            affixes = stat.get("affixes", {})
            if affixes:
                # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π property
                for affix in affixes.values():
                    return affix.get("property", stat_id)
            return stat_id
    return stat_id

def get_sub_stat_name(game_data, stat_id):
    for stat in game_data["relic_sub_affixes"].values():
        if stat["id"] == stat_id:
            affixes = stat.get("affixes", {})
            if affixes:
                for affix in affixes.values():
                    return affix.get("property", stat_id)
            return stat_id
    return stat_id

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def game_keyboard():
    kb = [
        [InlineKeyboardButton(text="üéÆ Honkai: Star Rail", callback_data="game:Honkai: Star Rail")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è Info", callback_data="info:main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def element_keyboard(elements, game_data):
    # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—É—Ç–µ–π
    path_emojis = {
        "–û—Ö–æ—Ç–∞": "üèπ",
        "–†–∞–∑—Ä—É—à–µ–Ω–∏–µ": "üõ§Ô∏è",
        "–ì–∞—Ä–º–æ–Ω–∏—è": "üé∂",
        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ": "üõ°Ô∏è",
        "–ù–µ–±—ã—Ç–∏–µ": "üíÄ",
        "–ò–∑–æ–±–∏–ª–∏–µ": "üå∏",
        "–≠—Ä—É–¥–∏—Ü–∏—è": "üìö",
        # ... –¥—Ä—É–≥–∏–µ –ø—É—Ç–∏ ...
    }
    kb = []
    for el in elements:
        el_name = get_path_name(game_data, el)
        emoji = path_emojis.get(el_name, "")
        kb.append([InlineKeyboardButton(text=f"{emoji} {el_name}", callback_data=f"element:{el}")])
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:game")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

def character_keyboard(characters):
    kb = []
    for ch in characters:
        if "{NICKNAME}" in ch:
            continue
        kb.append([InlineKeyboardButton(text=f"üë§ {ch}", callback_data=f"char:{ch}")])
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:element")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

def build_keyboard():
    kb = [
        [InlineKeyboardButton(text="üîÑ –ö –≤—ã–±–æ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", callback_data="back:char")],
        [InlineKeyboardButton(text="üè† –í –Ω–∞—á–∞–ª–æ", callback_data="back:home")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–ª–¥–∞ –ø–æ –¢–ó ---
def format_build(character, game_data):
    msg = f"<b>{character['name']}</b>\n"
    msg += f"–ü—É—Ç—å: {get_path_name(game_data, character.get('path'))}\n"
    msg += f"–≠–ª–µ–º–µ–Ω—Ç: {get_element_name(game_data, character.get('element'))}\n\n"
    # –†–µ–ª–∏–∫–≤–∏–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
    relics = character.get("relic_sets", [])
    if relics:
        msg += f"<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–µ–ª–∏–∫–≤–∏–∏:</b> {get_relic_set_name(game_data, relics[0])}\n"
        if len(relics) > 1:
            msg += f"<b>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:</b> {get_relic_set_name(game_data, relics[1])}\n"
    # –ü–ª–∞–Ω–∞—Ä–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è (–æ—Å–Ω–æ–≤–Ω–æ–π –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
    planars = character.get("planar_sets", [])
    if planars:
        msg += f"<b>–ü–ª–∞–Ω–∞—Ä–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è:</b> {get_planar_name(game_data, planars[0])}\n"
        if len(planars) > 1:
            msg += f"<b>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:</b> {get_planar_name(game_data, planars[1])}\n"
    # –ö–æ–Ω—É—Å—ã (5‚òÖ, 4‚òÖ, 3‚òÖ/4‚òÖ)
    cones = character.get("light_cones", [])
    cone_5 = next((c for c in cones if get_cone_name(game_data, c)[1] == 5), None)
    cone_4 = next((c for c in cones if get_cone_name(game_data, c)[1] == 4), None)
    cone_3 = next((c for c in cones if get_cone_name(game_data, c)[1] == 3), None)
    if cone_5:
        name, _ = get_cone_name(game_data, cone_5)
        msg += f"<b>5‚òÖ –∫–æ–Ω—É—Å:</b> {name}\n"
    if cone_4:
        name, _ = get_cone_name(game_data, cone_4)
        msg += f"<b>4‚òÖ –∫–æ–Ω—É—Å:</b> {name}\n"
    if cone_3:
        name, _ = get_cone_name(game_data, cone_3)
        msg += f"<b>3‚òÖ –∫–æ–Ω—É—Å:</b> {name}\n"
    else:
        cones_4 = [c for c in cones if get_cone_name(game_data, c)[1] == 4]
        if len(cones_4) > 1:
            name, _ = get_cone_name(game_data, cones_4[1])
            msg += f"<b>4‚òÖ –∫–æ–Ω—É—Å (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞):</b> {name}\n"
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–ª–∏–∫–≤–∏–π (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)
    main_stats = character.get("main_stats", {})
    if main_stats:
        msg += "<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–ª–∏–∫–≤–∏–π:</b>\n"
        for slot, stat_ids in main_stats.items():
            stat_names = [get_main_stat_name(game_data, s) for s in stat_ids]
            msg += f"- {slot}: {', '.join(stat_names)}\n"
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    rec_stats = character.get("recommended_stats", [])
    if rec_stats:
        msg += "<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:</b>\n"
        for stat in rec_stats:
            msg += f"- {stat}\n"
    return msg.strip()

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–ª–¥–∞ ---
def format_build_full(character, game_data, build):
    msg = f"<b>{character['name']}</b>\n"
    msg += f"–ü—É—Ç—å: {get_path_name(game_data, character.get('path'))}\n"
    msg += f"–≠–ª–µ–º–µ–Ω—Ç: {get_element_name(game_data, character.get('element'))}\n\n"
    if not build:
        msg += "<i>–ë–∏–ª–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.</i>"
        return msg
    # –†–µ–ª–∏–∫–≤–∏–∏
    relics = build.get("relic_sets", [])
    if relics:
        msg += f"<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–µ–ª–∏–∫–≤–∏–∏:</b> {', '.join([get_relic_set_name(game_data, r) for r in relics])}\n"
    # –ü–ª–∞–Ω–∞—Ä—ã
    planars = build.get("planar_sets", [])
    if planars:
        msg += f"<b>–ü–ª–∞–Ω–∞—Ä–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è:</b> {', '.join([get_relic_set_name(game_data, p) for p in planars])}\n"
    # –ö–æ–Ω—É—Å—ã
    cones = build.get("light_cones", [])
    if cones:
        cones_str = []
        for cone in cones:
            name, rarity = get_cone_name(game_data, cone)
            cones_str.append(f"{name} ({rarity}‚òÖ)" if rarity else name)
        msg += f"<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–Ω—É—Å—ã:</b> {', '.join(cones_str)}\n"
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç—ã
    main_stats = build.get("main_stats", {})
    if main_stats:
        msg += "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç—ã —Ä–µ–ª–∏–∫–≤–∏–π:</b>\n"
        for slot, stat_ids in main_stats.items():
            stat_names = [get_main_stat_name(game_data, s) for s in stat_ids]
            msg += f"- {slot}: {', '.join(stat_names)}\n"
    # –°—É–±—Å—Ç–∞—Ç—ã
    sub_stats = build.get("sub_stats", [])
    if sub_stats:
        msg += "<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—É–±—Å—Ç–∞—Ç—ã:</b> " + ", ".join([get_sub_stat_name(game_data, s) for s in sub_stats]) + "\n"
    # –ü—Ä–æ—á–µ–µ
    notes = build.get("notes")
    if notes:
        msg += f"\n<i>{notes}</i>"
    return msg.strip()

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–ª–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ ---
def generate_build_for_character(character, game_data):
    # 1. –ü—É—Ç—å –∏ —ç–ª–µ–º–µ–Ω—Ç
    path_id = character.get("path")
    element_id = character.get("element")
    path = get_path_name(game_data, path_id)
    element = get_element_name(game_data, element_id)

    # 2. –†–µ–ª–∏–∫–≤–∏–∏ (–ø–æ —ç–ª–µ–º–µ–Ω—Ç—É/—Ä–æ–ª–∏)
    relic_sets = []
    for relic in game_data["relic_sets"].values():
        # –ë–æ–Ω—É—Å –Ω–∞ –Ω—É–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –ø–æ —Ä–æ–ª–∏
        desc = " ".join(relic.get("desc", []))
        if element in desc or path in desc or "—É—Ä–æ–Ω" in desc or "–ª–µ—á–µ–Ω–∏–µ" in desc or "–∑–∞—â–∏—Ç–∞" in desc:
            relic_sets.append(relic["id"])
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º, –∑–∞—Ç–µ–º –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Å —Ä–æ–ª—å—é
    relic_sets = relic_sets[:2] if relic_sets else [list(game_data["relic_sets"].keys())[0]]

    # 3. –ü–ª–∞–Ω–∞—Ä–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è (–∏—â–µ–º –ø–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)
    planar_sets = []
    for relic in game_data["relic_sets"].values():
        if relic.get("type") == "Planar":
            desc = " ".join(relic.get("desc", []))
            if element in desc or path in desc or "—É—Ä–æ–Ω" in desc or "–ª–µ—á–µ–Ω–∏–µ" in desc or "–∑–∞—â–∏—Ç–∞" in desc:
                planar_sets.append(relic["id"])
    planar_sets = planar_sets[:2] if planar_sets else [r["id"] for r in list(game_data["relic_sets"].values()) if r.get("type") == "Planar"][:2]

    # 4. –ö–æ–Ω—É—Å—ã (–ø–æ –ø—É—Ç–∏ –∏ —Ä–µ–¥–∫–æ—Å—Ç–∏)
    cones = [cone["id"] for cone in game_data["light_cones"].values() if cone.get("path") == path_id]
    cones_5 = [c for c in cones if get_cone_name(game_data, c)[1] == 5]
    cones_4 = [c for c in cones if get_cone_name(game_data, c)[1] == 4]
    cones_3 = [c for c in cones if get_cone_name(game_data, c)[1] == 3]
    cones = cones_5[:1] + cones_4[:1] + cones_3[:1]

    # 5. –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç—ã (–ø–æ —Ç–∏–ø—É —Å–ª–æ—Ç–∞)
    main_stats = {
        "–ì–æ–ª–æ–≤–∞": ["HPDelta"],
        "–†—É–∫–∏": ["AttackDelta"],
        "–¢–µ–ª–æ": ["AttackAddedRatio", "CriticalChanceBase", "CriticalDamageBase", "HealRatioBase", "StatusProbabilityBase"],
        "–ù–æ–≥–∏": ["SpeedDelta", "AttackAddedRatio"],
        "–°—Ñ–µ—Ä–∞": [f"{element}AddedRatio", "HPAddedRatio", "AttackAddedRatio"],
        "–ö–∞–Ω–∞—Ç": ["SPRatioBase", "AttackAddedRatio", "HPAddedRatio"]
    }
    # 6. –°—É–±—Å—Ç–∞—Ç—ã (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ)
    sub_stats = ["CriticalChanceBase", "CriticalDamageBase", "SpeedDelta", "AttackAddedRatio", "HPAddedRatio", "StatusProbabilityBase"]

    # 7. –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = f"<b>{character['name']}</b>\n"
    msg += f"–ü—É—Ç—å: {path}\n"
    msg += f"–≠–ª–µ–º–µ–Ω—Ç: {element}\n\n"
    msg += f"<b>–†–µ–ª–∏–∫–≤–∏–∏:</b> {', '.join([get_relic_set_name(game_data, r) for r in relic_sets])}\n"
    if planar_sets:
        msg += f"<b>–ü–ª–∞–Ω–∞—Ä–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è:</b> {', '.join([get_relic_set_name(game_data, p) for p in planar_sets])}\n"
    if cones:
        cones_str = []
        for cone in cones:
            name, rarity = get_cone_name(game_data, cone)
            cones_str.append(f"{name} ({rarity}‚òÖ)" if rarity else name)
        msg += f"<b>–ö–æ–Ω—É—Å—ã:</b> {', '.join(cones_str)}\n"
    msg += "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç—ã:</b>\n"
    for slot, stats in main_stats.items():
        stat_names = [get_main_stat_name(game_data, s) for s in stats]
        msg += f"- {slot}: {', '.join(stat_names)}\n"
    msg += "<b>–í—Ç–æ—Ä–æ—Å—Ç–∞—Ç—ã:</b> " + ", ".join([get_sub_stat_name(game_data, s) for s in sub_stats])
    return msg.strip()

# === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø best_builds.json ===
BEST_BUILDS_PATH = "best_builds.json"
best_builds = []
builds_by_character = {}

# –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–∏–ª–¥–æ–≤
builds_lock = threading.Lock()
def load_best_builds():
    global best_builds, builds_by_character
    with builds_lock:
        try:
            with open(BEST_BUILDS_PATH, encoding="utf-8") as f:
                best_builds = json.load(f)
            builds_by_character = {}
            for build in best_builds:
                name = build["character"].strip().lower()
                builds_by_character.setdefault(name, []).append(build)
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(best_builds)} –±–∏–ª–¥–æ–≤ –∏–∑ {BEST_BUILDS_PATH}")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {BEST_BUILDS_PATH}: {e}")
            best_builds = []
            builds_by_character = {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_best_builds()

def get_builds_for_character(name):
    return builds_by_character.get(name.strip().lower(), [])

def format_best_build(build):
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫: –∏–º—è, —Ä–µ–¥–∫–æ—Å—Ç—å, –ø—É—Ç—å, —ç–ª–µ–º–µ–Ω—Ç
    name = build.get("character", "")
    rarity = build.get("analytics", {}).get("rarity", "")
    path = build.get("analytics", {}).get("path", "")
    element = build.get("analytics", {}).get("element", "")
    # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—É—Ç–∏ –∏ —ç–ª–µ–º–µ–Ω—Ç–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    path_emoji = "üõ§Ô∏è"
    element_emoji = "üå™Ô∏è"
    rarity_emoji = "‚≠êÔ∏è"
    header = f"<b>{name}</b> | {rarity_emoji} <b>{rarity}</b> | {path_emoji} <b>{path}</b> | {element_emoji} <b>{element}</b>"
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è markdown-like –≤ HTML
    def to_html(text):
        if not text:
            return ""
        # –ñ–∏—Ä–Ω—ã–π: *—Ç–µ–∫—Å—Ç* ‚Üí <b>—Ç–µ–∫—Å—Ç</b>
        text = re.sub(r'\*(.*?)\*', r'<b>\1</b>', text)
        # –ö—É—Ä—Å–∏–≤: _—Ç–µ–∫—Å—Ç_ ‚Üí <i>—Ç–µ–∫—Å—Ç</i>, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–æ–≤–Ω–æ –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—é —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∏ –Ω–µ –¥–≤–æ–π–Ω—ã–µ
        text = re.sub(r'(?<!_)_(?!_)([^_]+?)(?<!_)_(?!_)', r'<i>\1</i>', text)
        # –ó–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π: ~—Ç–µ–∫—Å—Ç~ ‚Üí <s>—Ç–µ–∫—Å—Ç</s>
        text = re.sub(r'~(.*?)~', r'<s>\1</s>', text)
        # –ö–æ–¥: ```–∫–æ–¥``` ‚Üí <code>–∫–æ–¥</code>
        text = re.sub(r'```(.*?)```', r'<code>\1</code>', text, flags=re.DOTALL)
        # –°—Å—ã–ª–∫–∏: [—Ç–µ–∫—Å—Ç](url) ‚Üí <a href="url">—Ç–µ–∫—Å—Ç</a>
        text = re.sub(r'\[(.*?)\]\((https?://[^\s]+)\)', r'<a href="\2">\1</a>', text)
        return text
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—è
    parts = [
        header,
        to_html(build.get("best_relic_pretty", "")),
        to_html(build.get("alt_relic_pretty", "")),
        to_html(build.get("best_5_lc_pretty", "")),
        to_html(build.get("best_4_lc_pretty", "")),
        to_html(build.get("best_planar_pretty", "")),
        to_html(build.get("alt_planar_pretty", "")),
        to_html(build.get("main_stats_pretty", "")),
        to_html(build.get("recommended_substats_pretty", "")),
        to_html(build.get("best_teammates_pretty", "")),
        to_html(build.get("team_pretty", "")),
        to_html(build.get("role_pretty", ""))
    ]
    return "\n".join([p for p in parts if p])

# --- FSM-–ª–æ–≥–∏–∫–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "<b>–ü—Ä–∏–≤–µ—Ç, —è Honkai Helper!</b>\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –±–∏–ª–¥ –Ω–∞ –Ω—É–∂–Ω–æ–≥–æ —Ç–µ–±–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
        reply_markup=game_keyboard()
    )
    await state.set_state(BuildStates.choose_game)

@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
        reply_markup=game_keyboard()
    )
    await state.set_state(BuildStates.choose_game)

@dp.callback_query(F.data.startswith("game:"))
async def cb_choose_game(callback: types.CallbackQuery, state: FSMContext):
    game = callback.data.split(":", 1)[1]
    cache = load_cache()
    if not is_cache_valid(cache):
        cache = update_cache()
    game_data = cache["game_data"].get(game)
    if not game_data:
        await callback.message.edit_text("–î–∞–Ω–Ω—ã–µ –ø–æ –∏–≥—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    elements = get_elements(game_data)
    await state.update_data(game=game)
    await callback.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—É—Ç—å (—ç–ª–µ–º–µ–Ω—Ç):</b>",
        reply_markup=element_keyboard(elements, game_data)
    )
    await state.set_state(BuildStates.choose_element)

@dp.callback_query(F.data.startswith("element:"))
async def cb_choose_element(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    game = data.get("game")
    cache = load_cache()
    game_data = cache["game_data"].get(game)
    element = callback.data.split(":", 1)[1]
    characters = get_characters_by_element(game_data, element)
    await state.update_data(element=element)
    await callback.message.edit_text(
        f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ({get_path_name(game_data, element)}):</b>",
        reply_markup=character_keyboard(characters)
    )
    await state.set_state(BuildStates.choose_character)

@dp.callback_query(F.data.startswith("char:"))
async def cb_choose_character(callback: types.CallbackQuery, state: FSMContext):
    char_name = callback.data.split(":", 1)[1]
    builds = get_builds_for_character(char_name)
    if builds:
        for build in builds:
            build_text = format_best_build(build)
            await callback.message.edit_text(build_text, reply_markup=build_keyboard())
        return
    await callback.message.edit_text("–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –±–∏–ª–¥ –Ω–µ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –û–∂–∏–¥–∞–π—Ç–µ –µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ –±–æ—Ç–µ!", reply_markup=build_keyboard())

# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥ ---
@dp.callback_query(F.data == "back:game")
async def cb_back_game(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "<b>–ü—Ä–∏–≤–µ—Ç, —è Honkai Helper!</b>\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –±–∏–ª–¥ –Ω–∞ –Ω—É–∂–Ω–æ–≥–æ —Ç–µ–±–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
        reply_markup=game_keyboard()
    )
    await state.set_state(BuildStates.choose_game)

@dp.callback_query(F.data == "back:element")
async def cb_back_element(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    game = data.get("game")
    cache = load_cache()
    game_data = cache["game_data"].get(game)
    elements = get_elements(game_data)
    await callback.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—É—Ç—å (—ç–ª–µ–º–µ–Ω—Ç):</b>",
        reply_markup=element_keyboard(elements, game_data)
    )
    await state.set_state(BuildStates.choose_element)

@dp.callback_query(F.data == "back:char")
async def cb_back_char(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    game = data.get("game")
    element = data.get("element")
    cache = load_cache()
    game_data = cache["game_data"].get(game)
    characters = get_characters_by_element(game_data, element)
    await callback.message.edit_text(
        f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ({get_path_name(game_data, element)}):</b>",
        reply_markup=character_keyboard(characters)
    )
    await state.set_state(BuildStates.choose_character)

@dp.callback_query(F.data == "back:home")
async def cb_back_home(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "<b>–ü—Ä–∏–≤–µ—Ç, —è Honkai Helper!</b>\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –±–∏–ª–¥ –Ω–∞ –Ω—É–∂–Ω–æ–≥–æ —Ç–µ–±–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
        reply_markup=game_keyboard()
    )
    await state.set_state(BuildStates.choose_game)

@dp.callback_query(F.data == "info:main")
async def cb_info_main(callback: types.CallbackQuery, state: FSMContext):
    info_text = (
        "<b>–ü—Ä–∏–≤–µ—Ç!</b>\n"
        "–°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –º–æ–∏–º –±–æ—Ç–æ–º!\n"
        "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –Ω—ë–º –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ Honkai Star Rail –∏ —Å–±–æ—Ä–∫–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –º—ã –¥–æ–±–∞–≤–∏–º –±–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–π, –ø–æ —Ç–∏–ø—É: –ö–∞–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ —Ç–æ–≥–æ –∏–ª–∏ –∏–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –µ—â—ë —á—Ç–æ-—Ç–æ —Ç–∞–º.\n"
        "–¢–∞–∫–∂–µ –º—ã –ø–ª–∞–Ω–∏—Ä—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å Zenless Zone Zero, —Å —Ç–µ–º –∂–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —á—Ç–æ –∏ Honkai Star Rail.\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏ –¥–ª—è –±–æ—Ç–∞ ‚Äî –¥–µ–ª–∏—Ç–µ—Å—å –∏–º–∏, –º—ã —É—á—Ç—ë–º –∏—Ö!\n\n"
        "–ú–æ–π —Ç–≥–∫: <a href=\"https://t.me/perpetuahsr\">–ø–µ—Ä–ø–µ—Ç—É—è –º–µ–∂ –∑–≤–µ–∑–¥</a>\n"
        "–ú–æ–π —Ç–∏–∫-—Ç–æ–∫: <a href=\"https://www.tiktok.com/@perpetuya\">@perpetuya</a>\n"
        "<a href=\"https://t.me/+CsnFVzw7VxkyYjFi\">–ú—è—É-–º—è—É-–º—è—É</a>"
    )
    await callback.message.edit_text(info_text, reply_markup=game_keyboard())

# --- –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
async def auto_update_cache():
    while True:
        update_cache()
        await asyncio.sleep(60 * 60 * 24)

async def start_webhook():
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    webhook_url = os.getenv("WEBHOOK_URL")
    webhook_path = os.getenv("WEBHOOK_PATH", "/webhook")
    host = os.getenv("WEBAPP_HOST", "0.0.0.0")
    port = int(os.getenv("WEBAPP_PORT", 8080))

    print(f"[bot] –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook: {webhook_url}{webhook_path}")
    os.makedirs(DATA_DIR, exist_ok=True)
    cache = load_cache()
    if not is_cache_valid(cache):
        print("[bot] –ö—ç—à –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è—é...")
        update_cache()
    else:
        print("[bot] –ö—ç—à –≤–∞–ª–∏–¥–µ–Ω, –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    asyncio.create_task(auto_update_cache())

    await bot.set_webhook(f"{webhook_url}{webhook_path}")
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=webhook_path)
    setup_application(app, dp, bot=bot)
    web.run_app(app, host=host, port=port)

async def main():
    print("[bot] –ó–∞–ø—É—Å–∫ main()...")
    if os.getenv("WEBHOOK_URL"):
        await start_webhook()
    else:
        os.makedirs(DATA_DIR, exist_ok=True)
    cache = load_cache()
    if not is_cache_valid(cache):
        print("[bot] –ö—ç—à –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è—é...")
        update_cache()
    else:
        print("[bot] –ö—ç—à –≤–∞–ª–∏–¥–µ–Ω, –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    asyncio.create_task(auto_update_cache())
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("[bot] –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ __main__...")
    asyncio.run(main())
