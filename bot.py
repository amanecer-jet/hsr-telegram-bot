import asyncio
import aiohttp
import json
import logging
from typing import Dict, List, Optional
from dataclasses import dataclass
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import os
from flask import Flask, request
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://your-app.herokuapp.com')
PORT = int(os.getenv('PORT', 5000))

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
GAMES = {
    'hsr': 'Honkai Star Rail',
    'gi': 'Genshin Impact'
}

HSR_ELEMENTS = {
    'fire': 'üî• –û–≥–æ–Ω—å',
    'ice': '‚ùÑÔ∏è –õ—ë–¥', 
    'lightning': '‚ö° –ú–æ–ª–Ω–∏—è',
    'wind': 'üí® –í–µ—Ç–µ—Ä',
    'physical': '‚öîÔ∏è –§–∏–∑–∏—á–µ—Å–∫–∏–π',
    'quantum': 'üåå –ö–≤–∞–Ω—Ç',
    'imaginary': 'üå† –ú–Ω–∏–º—ã–π'
}

@dataclass
class Character:
    name: str
    element: str
    path: str
    rarity: int
    builds: List[Dict]

class HSRDataParser:
    def __init__(self):
        self.characters_data = {}
        self.base_url = "https://www.prydwen.gg"
        
    async def fetch_characters_data(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö —Å API"""
        try:
            async with aiohttp.ClientSession() as session:
                url = "https://www.prydwen.gg/page-data/sq/d/2951347825.json"
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        return self.parse_characters_data(data)
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {response.status}")
                        return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    
    def parse_characters_data(self, data: Dict) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        characters = {}
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã prydwen.gg
            if 'data' in data and 'allContentfulHsrCharacter' in data['data']:
                char_data = data['data']['allContentfulHsrCharacter']['nodes']
                
                for char in char_data:
                    char_name = char.get('name', '')
                    char_element = char.get('element', '').lower()
                    char_path = char.get('path', '')
                    char_rarity = char.get('rarity', 0)
                    
                    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∏–ª–¥–æ–≤
                    builds = self.create_default_builds(char_element, char_path)
                    
                    character = Character(
                        name=char_name,
                        element=char_element,
                        path=char_path,
                        rarity=char_rarity,
                        builds=builds
                    )
                    
                    if char_element not in characters:
                        characters[char_element] = []
                    characters[char_element].append(character)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {e}")
            
        return characters
    
    def create_default_builds(self, element: str, path: str) -> List[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –±–∏–ª–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –ø—É—Ç–∏"""
        builds = []
        
        # –ë–∞–∑–æ–≤—ã–µ –±–∏–ª–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—É—Ç–∏
        if 'destruction' in path.lower() or 'hunt' in path.lower():
            builds.append({
                'name': 'DPS Build',
                'relics': {
                    'main': 'Champion of Streetwise Boxing / Musketeer of Wild Wheat',
                    'alternative': 'Wastelander of Banditry Desert'
                },
                'stats': {
                    'body': 'CRIT Rate / CRIT DMG',
                    'feet': 'ATK% / Speed',
                    'sphere': 'ATK% / Elemental DMG',
                    'rope': 'ATK% / Energy Regen'
                },
                'substats': 'CRIT Rate > CRIT DMG > ATK% > Speed > Break Effect'
            })
        elif 'nihility' in path.lower():
            builds.append({
                'name': 'DOT Build',
                'relics': {
                    'main': 'Prisoner in Deep Confinement',
                    'alternative': 'Musketeer of Wild Wheat'
                },
                'stats': {
                    'body': 'Effect Hit Rate / ATK%',
                    'feet': 'ATK% / Speed',
                    'sphere': 'ATK% / Elemental DMG',
                    'rope': 'ATK% / Energy Regen'
                },
                'substats': 'Effect Hit Rate > ATK% > Speed > CRIT Rate > CRIT DMG'
            })
        elif 'abundance' in path.lower() or 'preservation' in path.lower():
            builds.append({
                'name': 'Support Build',
                'relics': {
                    'main': 'Passerby of Wandering Cloud / Musketeer of Wild Wheat',
                    'alternative': 'Knight of Purity Palace'
                },
                'stats': {
                    'body': 'HP% / DEF% / Healing Bonus',
                    'feet': 'Speed / HP% / DEF%',
                    'sphere': 'HP% / DEF%',
                    'rope': 'Energy Regen / HP% / DEF%'
                },
                'substats': 'Speed > HP% > DEF% > Effect RES > Energy Regen'
            })
        elif 'harmony' in path.lower():
            builds.append({
                'name': 'Buffer Build',
                'relics': {
                    'main': 'Messenger Traversing Hackerspace / Musketeer of Wild Wheat',
                    'alternative': 'Passerby of Wandering Cloud'
                },
                'stats': {
                    'body': 'HP% / DEF% / Effect Hit Rate',
                    'feet': 'Speed',
                    'sphere': 'HP% / DEF%',
                    'rope': 'Energy Regen / HP%'
                },
                'substats': 'Speed > HP% > DEF% > Effect Hit Rate > Energy Regen'
            })
        
        return builds

class HSRBot:
    def __init__(self):
        self.data_parser = HSRDataParser()
        self.characters_data = {}
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [InlineKeyboardButton("üéÆ Honkai Star Rail", callback_data="game_hsr")],
            [InlineKeyboardButton("üó°Ô∏è Genshin Impact", callback_data="game_gi")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–±–æ—Ä–∫–∞—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö:"
        )
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data.startswith("game_"):
            await self.handle_game_selection(query, data)
        elif data.startswith("element_"):
            await self.handle_element_selection(query, data)
        elif data.startswith("char_"):
            await self.handle_character_selection(query, data)
        elif data == "back_to_games":
            await self.back_to_games(query)
        elif data == "back_to_elements":
            await self.back_to_elements(query)
    
    async def handle_game_selection(self, query, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã"""
        game = data.split("_")[1]
        
        if game == "hsr":
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
            if not self.characters_data:
                await query.edit_message_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...")
                self.characters_data = await self.data_parser.fetch_characters_data()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
            keyboard = []
            for element_key, element_name in HSR_ELEMENTS.items():
                if element_key in self.characters_data:
                    keyboard.append([InlineKeyboardButton(
                        element_name, 
                        callback_data=f"element_{element_key}"
                    )])
            
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_games")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üéÆ Honkai Star Rail\n\n–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
                reply_markup=reply_markup
            )
        
        elif game == "gi":
            await query.edit_message_text(
                "üó°Ô∏è Genshin Impact\n\n‚ö†Ô∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è Genshin Impact –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_games")
                ]])
            )
    
    async def handle_element_selection(self, query, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        element = data.split("_")[1]
        
        if element in self.characters_data:
            characters = self.characters_data[element]
            keyboard = []
            
            for char in characters:
                rarity_stars = "‚≠ê" * char.rarity
                keyboard.append([InlineKeyboardButton(
                    f"{char.name} {rarity_stars}",
                    callback_data=f"char_{element}_{char.name}"
                )])
            
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_elements")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            element_name = HSR_ELEMENTS.get(element, element.title())
            await query.edit_message_text(
                f"{element_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
                reply_markup=reply_markup
            )
    
    async def handle_character_selection(self, query, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        parts = data.split("_", 2)
        element = parts[1]
        char_name = parts[2]
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character = None
        if element in self.characters_data:
            for char in self.characters_data[element]:
                if char.name == char_name:
                    character = char
                    break
        
        if character:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–±–æ—Ä–∫–µ
            message = self.format_character_build(character)
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"element_{element}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')
    
    def format_character_build(self, character: Character) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–±–æ—Ä–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        rarity_stars = "‚≠ê" * character.rarity
        element_emoji = {
            'fire': 'üî•', 'ice': '‚ùÑÔ∏è', 'lightning': '‚ö°', 'wind': 'üí®',
            'physical': '‚öîÔ∏è', 'quantum': 'üåå', 'imaginary': 'üå†'
        }.get(character.element, '‚ö°')
        
        message = f"<b>{character.name}</b> {rarity_stars}\n"
        message += f"{element_emoji} {character.element.title()} ‚Ä¢ {character.path.title()}\n\n"
        
        for i, build in enumerate(character.builds):
            message += f"<b>üìã {build['name']}</b>\n\n"
            
            message += "<b>üéØ –†–µ–ª–∏–∫–≤–∏–∏:</b>\n"
            message += f"‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ: {build['relics']['main']}\n"
            message += f"‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ: {build['relics']['alternative']}\n\n"
            
            message += "<b>üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n"
            for slot, stat in build['stats'].items():
                message += f"‚Ä¢ {slot.title()}: {stat}\n"
            
            message += f"\n<b>üîß –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–¥—Å—Ç–∞—Ç–æ–≤:</b>\n{build['substats']}\n"
            
            if i < len(character.builds) - 1:
                message += "\n" + "‚îÄ"*30 + "\n\n"
        
        return message
    
    async def back_to_games(self, query):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã"""
        keyboard = [
            [InlineKeyboardButton("üéÆ Honkai Star Rail", callback_data="game_hsr")],
            [InlineKeyboardButton("üó°Ô∏è Genshin Impact", callback_data="game_gi")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö:",
            reply_markup=reply_markup
        )
    
    async def back_to_elements(self, query):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        keyboard = []
        for element_key, element_name in HSR_ELEMENTS.items():
            if element_key in self.characters_data:
                keyboard.append([InlineKeyboardButton(
                    element_name, 
                    callback_data=f"element_{element_key}"
                )])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_games")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üéÆ Honkai Star Rail\n\n–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
            reply_markup=reply_markup
        )

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook
app = Flask(__name__)
bot_instance = HSRBot()
application = None

@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook"""
    try:
        json_data = request.get_json()
        update = Update.de_json(json_data, application.bot)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        asyncio.create_task(application.process_update(update))
        
        return 'OK'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ webhook: {e}")
        return 'Error', 500

@app.route('/')
def index():
    return 'HSR Bot is running!'

async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    webhook_url = f"{WEBHOOK_URL}/{BOT_TOKEN}"
    await application.bot.set_webhook(url=webhook_url)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app.run(host='0.0.0.0', port=PORT)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global application
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot_instance.start))
    application.add_handler(CallbackQueryHandler(bot_instance.button_callback))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
    await setup_webhook()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
    try:
        while True:
            await asyncio.sleep(60)
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        await application.bot.delete_webhook()

if __name__ == '__main__':
    asyncio.run(main())